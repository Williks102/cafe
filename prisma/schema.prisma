// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  image       String   @db.VarChar(500)
  price       Int      // Prix en CFA (centimes)
  category    String?  @db.VarChar(100)
  available   Boolean  @default(true)
  stock       Int      @default(0)    // Nouveau: Gestion du stock
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @db.VarChar(255)
  phone     String   @unique @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int
  status     OrderStatus @default(PENDING)
  totalPrice Int         // Prix total en CFA (centimes)
  notes      String?     @db.Text
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Int // Prix unitaire au moment de la commande

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("order_items")
}

enum OrderStatus {
  PENDING    // En attente
  CONFIRMED  // Confirmée
  PREPARING  // En préparation
  READY      // Prête
  DELIVERED  // Livrée
  CANCELLED  // Annulée
}